{"version":3,"sources":["components/TodoList.tsx","components/NewTodo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoList","props","className","items","map","todo","text","onClick","onDeleteTodo","bind","id","NewTodo","textInputRef","useRef","onSubmit","event","preventDefault","enteredText","current","value","onAddTodo","htmlFor","type","ref","App","useState","todos","setTodos","prevTodos","Math","random","toString","todoId","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA2BeA,EAlB2B,SAAAC,GAEtC,OACA,qBAAKC,UAAU,kBAAf,SACI,6BACKD,EAAME,MAAMC,KAAK,SAAAC,GAAI,OAClB,+BAEA,+BAAOA,EAAKC,OACZ,wBAAQC,QAASN,EAAMO,aAAaC,KAAK,KAAMJ,EAAKK,IAApD,sBAFKL,EAAKK,YCaXC,G,MArByB,SAAAV,GACpC,IAAMW,EAAeC,iBAAyB,MAS9C,OACA,uBAAMC,SARoB,SAACC,GACvBA,EAAMC,iBACN,IAAMC,EAAcL,EAAaM,QAASC,MAE3ClB,EAAMmB,UAAUH,IAInB,UACI,sBAAKf,UAAU,eAAf,UACI,uBAAOmB,QAAQ,YAAf,uBACA,uBAAOC,KAAK,OAAOZ,GAAG,YAAYa,IAAKX,OAE3C,wBAAQU,KAAK,SAAb,2BCMOE,EAxBO,WAAM,MAEAC,mBAAiB,IAFjB,mBAEnBC,EAFmB,KAEZC,EAFY,KAkB1B,OAAO,sBAAKzB,UAAU,MAAf,UACP,cAAC,EAAD,CAASkB,UAfc,SAACd,GAEvBqB,GAAS,SAAAC,GAAS,4BACdA,GADc,CAEjB,CAAElB,GAAGmB,KAAKC,SAASC,WAAYzB,KAAKA,WAYtC,cAAC,EAAD,CAAUH,MAAOuB,EAAOlB,aARE,SAACwB,GACzBL,GAAS,SAAAC,GACP,OAAOA,EAAUK,QAAO,SAAA5B,GAAI,OAAIA,EAAKK,KAAOsB,eCNnCE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.66809d38.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './TodoList.css';\r\n\r\ninterface TodoListProps {\r\n    items: {id: string, text:string}[];\r\n    onDeleteTodo: (id:string) => void;\r\n}\r\n \r\nconst TodoList: React.FC<TodoListProps> = props => { \r\n\r\n    return ( \r\n    <div className=\"todoListWrapper\">\r\n        <ul>\r\n            {props.items.map( todo => (\r\n                <li \r\n                key={todo.id}>\r\n                <span>{todo.text}</span>\r\n                <button onClick={props.onDeleteTodo.bind(null, todo.id)}>\r\n                    DELETE\r\n                </button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </div> );\r\n}\r\n \r\nexport default TodoList;","import React, { useRef } from 'react';\r\n\r\nimport './NewTodo.css';\r\n\r\ntype NewTodoProps = {\r\n    onAddTodo: (todoText: string) => void;\r\n}\r\n\r\nconst NewTodo: React.FC<NewTodoProps> = props => {\r\n    const textInputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const todoSubmitHandler = (event:React.FormEvent) => {\r\n        event.preventDefault();\r\n        const enteredText = textInputRef.current!.value;\r\n       // console.log(enteredText)\r\n       props.onAddTodo(enteredText);\r\n\r\n    };\r\n    return (\r\n    <form onSubmit={todoSubmitHandler}>\r\n        <div className=\"form-control\">\r\n            <label htmlFor=\"todo-text\">Todo Text</label>\r\n            <input type=\"text\" id=\"todo-text\" ref={textInputRef} />\r\n        </div>\r\n        <button type=\"submit\">ADD TODO</button>\r\n    </form>\r\n    )\r\n};\r\n\r\nexport default NewTodo;","import React, { useState } from 'react';\n\nimport TodoList from './components/TodoList';\nimport NewTodo from './components/NewTodo';\nimport { Todo } from './todo.model';\n\nconst App: React.FC = () => { \n  //const todos = [{id : 't1',  text : 'test1'}]\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const todoAddHandler = (text:string) => {\n   // console.log(text);\n   setTodos(prevTodos => [\n    ...prevTodos,\n    { id:Math.random().toString(), text:text}\n   ]);\n  };\n\n  const todoDeleteHandler = (todoId: string) => {\n    setTodos(prevTodos => {\n      return prevTodos.filter(todo => todo.id !== todoId);\n    })\n  }\n\n  return <div className=\"App\"> \n  <NewTodo onAddTodo={todoAddHandler} />\n  <TodoList items={todos} onDeleteTodo={todoDeleteHandler} /> \n  </div>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}